{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "LogzioListener": {
      "defaultValue": "https://listener.logz.io:8071",
      "type": "String"
    },
    "LogsShippingToken": {
      "type": "String"
    },
    "Debug": {
      "defaultValue": false,
      "type": "bool"
    },
    "EventhubNamespace": {
      "defaultValue": "[concat('LogzioNamespace', uniqueString(resourceGroup().id))]",
      "type": "string"
    },
    "EventhubLogsName": {
      "defaultValue":"logzioeventhub",
      "type": "string"
    },
    "ConsumergroupsLogsName": {
      "defaultValue":"LogzioConsumerGroup",
      "type": "string"
    },
    "FunctionServerfarms": {
      "defaultValue": "[concat('logzioAppServicePlan', uniqueString(resourceGroup().id))]",
      "type": "string"
    },
    "LogzioAppStorageAccounts": {
      "defaultValue":"[concat('appstorage', uniqueString(resourceGroup().id))]",
      "type": "string"
    },
    "AuthorizationRulesSharedAccessKey": {
      "defaultValue":"LogzioSharedAccessKey",
      "type": "string"
    },
    "AppInsightsName": {
      "defaultValue":"[concat('logzioInsight', uniqueString(resourceGroup().id))]",
      "type": "string"
    },
    "functionsWorkerProcessCount": {
      "defaultValue": 10,
      "type": "int",
      "minValue": 1,
      "maxValue": 10
    }
  },
  "variables": {
    "logsFunctionAppName": "[concat('logziofunctionapp', uniqueString(resourceGroup().id))]",
    "backupStorageAccounts": "[concat('logsbackup', uniqueString(resourceGroup().id))]",
    "repoURL": "https://github.com/logzio/azure-serverless-go.git",
    "branch": "development"
  },
  "resources": [{
    "type": "Microsoft.EventHub/namespaces",
    "sku": {
      "name": "Standard",
      "tier": "Standard",
      "capacity": 1
    },
    "name": "[parameters('EventhubNamespace')]",
    "apiVersion": "2018-01-01-preview",
    "location": "[resourceGroup().location]",
    "tags": {},
    "scale": null,
    "properties": {
      "isAutoInflateEnabled": true,
      "maximumThroughputUnits": 20,
      "provisioningState": "Succeeded"
    },
    "dependsOn": []
  },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('backupStorageAccounts')]",
      "apiVersion": "2019-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[parameters('logzioAppStorageAccounts')]",
      "apiVersion": "2019-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "sku": {
        "name": "Y1",
        "tier": "S1",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "linux",
      "name": "[parameters('FunctionServerfarms')]",
      "apiVersion": "2020-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "name": "[parameters('FunctionServerfarms')]",
        "workerTierName": null,
        "adminSiteName": null,
        "hostingEnvironmentProfile": null,
        "perSiteScaling": false,
        "reserved": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Web/sites",
      "kind": "functionapp,linux",
      "name": "[variables('logsFunctionAppName')]",
      "apiVersion": "2020-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionServerfarms'))]",
        "reserved": true,
        "httpsOnly": true,
        "siteConfig": {
          "appSettings": [{
            "name": "FUNCTIONS_EXTENSION_VERSION",
            "value": "~3"
          },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "custom"
            },
            {
              "name": "FUNCTION_APP_EDIT_MODE",
              "value": "readwrite"
            },
            {
              "name": "FUNCTIONS_WORKER_PROCESS_COUNT",
              "value": "[parameters('functionsWorkerProcessCount')]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('logzioAppStorageAccounts'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('logzioAppStorageAccounts')),'2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('logsFunctionAppName'))]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('logzioAppStorageAccounts'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('logzioAppStorageAccounts')),'2019-06-01').keys[0].value)]"
            },
            {
              "name": "AzureEventHubLogsConnectionString",
              "value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('EventhubNamespace'), parameters('AuthorizationRulesSharedAccessKey')), '2017-04-01').primaryConnectionString]"
            },
            {
              "name": "ConsumergroupsLogsName",
              "value": "[parameters('ConsumergroupsLogsName')]"
            },
            {
              "name": "EventhubLogsName",
              "value": "[parameters('EventhubLogsName')]"
            },
            {
              "name": "LogsStorageConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('backupStorageAccounts'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('backupStorageAccounts')),'2019-06-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "LogzioToken",
              "value": "[parameters('LogsShippingToken')]"
            },
            {
              "name": "Debug",
              "value": "[parameters('Debug')]"
            },
            {
              "name": "LogzioListener",
              "value": "[parameters('LogzioListener')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', parameters('AppInsightsName')), '2015-05-01').InstrumentationKey]"
            }
          ]
        }
      },
      "resources": [{
        "apiVersion": "2020-06-01",
        "name": "web",
        "type": "sourcecontrols",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites/', variables('logsFunctionAppName'))]"
        ],
        "properties": {
          "RepoUrl": "[variables('repoURL')]",
          "branch": "[variables('branch')]",
          "IsManualIntegration": true
        }
      }],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionServerfarms'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('logzioAppStorageAccounts'))]",
        "[concat('Microsoft.EventHub/namespaces/', parameters('EventhubNamespace'))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "name": "[concat(parameters('EventhubNamespace'), '/', parameters('AuthorizationRulesSharedAccessKey'))]",
      "apiVersion": "2017-04-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventhubNamespace'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "name": "[concat(parameters('EventhubNamespace'), '/', parameters('EventhubLogsName'))]",
      "apiVersion": "2017-04-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "messageRetentionInDays": 7,
        "partitionCount": 32,
        "status": "Active"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventhubNamespace'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "name": "[concat(parameters('EventhubNamespace'), '/', parameters('EventhubLogsName'), '/', parameters('ConsumergroupsLogsName'))]",
      "apiVersion": "2017-04-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventhubNamespace'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('EventhubNamespace'), parameters('EventhubLogsName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('backupStorageAccounts'), '/default/logziologsbackupcontainer')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('backupStorageAccounts'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "name": "[parameters('AppInsightsName')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "applicationId": "[parameters('AppInsightsName')]"
      }
    }
  ]
}